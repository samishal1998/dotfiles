# 1Password CLI Integration
# This file sets up 1Password CLI integration for secrets management
# Only loads if 1Password CLI is installed on the system

{{ if lookPath "op" -}}
# 1Password CLI configuration
export OP_BIOMETRIC_UNLOCK_ENABLED=true    # Enable biometric unlock
export OP_DEVICE="{{ .chezmoi.hostname }}"  # Set device name

# 1Password CLI aliases
alias op-signin='eval $(op signin --account {{ .op_account }})'
alias op-list='op item list'
alias op-get='op item get'
alias op-create='op item create'
alias op-edit='op item edit'
alias op-delete='op item delete'

# 1Password development functions

# Load secrets from 1Password into environment variables
op-env() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: op-env <vault> [prefix]"
        echo "Example: op-env 'Development' 'DEV_'"
        return 1
    fi

    local vault="$1"
    local prefix="${2:-}"

    echo "Loading secrets from 1Password vault: $vault"

    # Get all items from the vault
    local items=($(op item list --vault "$vault" --format json | jq -r '.[].title'))

    for item in "${items[@]}"; do
        echo "Processing item: $item"

        # Get item details
        local item_json=$(op item get "$item" --vault "$vault" --format json)

        # Extract fields
        local fields=$(echo "$item_json" | jq -r '.fields[]? | select(.type == "CONCEALED") | .label')

        for field in $fields; do
            local value=$(echo "$item_json" | jq -r ".fields[]? | select(.label == \"$field\") | .value")

            if [[ -n "$value" ]]; then
                local env_var="${prefix}${field:u}"
                export "$env_var"="$value"
                echo "  $env_var=***"
            fi
        done
    done

    echo "Environment variables loaded from 1Password!"
}

# Load specific secret from 1Password
op-secret() {
    if [[ $# -lt 1 ]]; then
        echo "Usage: op-secret <item> [field] [env_var]"
        echo "Example: op-secret 'Database' 'password' 'DB_PASSWORD'"
        return 1
    fi

    local item="$1"
    local field="${2:-password}"
    local env_var="${3:-${field:u}}"

    echo "Loading secret: $item -> $field"

    local value=$(op read "op://{{ .op_account }}/$item/$field")

    if [[ -n "$value" ]]; then
        export "$env_var"="$value"
        echo "  $env_var=***"
    else
        echo "Failed to retrieve secret"
        return 1
    fi
}

# Create a new 1Password item
op-new() {
    if [[ $# -lt 1 ]]; then
        echo "Usage: op-new <item-name> [category]"
        echo "Categories: login, password, secure-note, etc."
        return 1
    fi

    local item_name="$1"
    local category="${2:-login}"

    echo "Creating new 1Password item: $item_name"

    case "$category" in
        "login")
            op item create \
                --category login \
                --title "$item_name" \
                --vault "Development" \
                --url "https://example.com" \
                --generate-password
            ;;
        "password")
            op item create \
                --category password \
                --title "$item_name" \
                --vault "Development" \
                --generate-password
            ;;
        "secure-note")
            op item create \
                --category secure-note \
                --title "$item_name" \
                --vault "Development"
            ;;
        *)
            echo "Unknown category: $category"
            return 1
            ;;
    esac

    echo "Item created successfully!"
}

# Search 1Password items
op-search() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: op-search <query>"
        return 1
    fi

    local query="$1"

    echo "Searching for: $query"
    op item list --categories login,password,secure-note --format table | grep -i "$query"
}

# Show 1Password vault information
op-info() {
    echo "=== 1Password Information ==="
    echo "Account: {{ .op_account }}"
    echo "Device: {{ .chezmoi.hostname }}"
    echo "Biometric Unlock: $OP_BIOMETRIC_UNLOCK_ENABLED"
    echo ""
    echo "=== Vaults ==="
    op vault list --format table
    echo ""
    echo "=== Recent Items ==="
    op item list --format table | head -10
}

# Backup 1Password items to local file (encrypted)
op-backup() {
    local backup_dir="$HOME/.op-backup"
    local timestamp=$(date +%Y%m%d-%H%M%S)
    local backup_file="$backup_dir/op-backup-$timestamp.json"

    mkdir -p "$backup_dir"

    echo "Creating 1Password backup..."
    op item list --format json > "$backup_file"

    # Encrypt the backup
    if command -v age >/dev/null 2>&1; then
        age -e "$backup_file" > "$backup_file.age"
        rm "$backup_file"
        echo "Backup encrypted and saved to: $backup_file.age"
    else
        echo "Backup saved to: $backup_file"
        echo "Consider installing age for encryption: brew install age"
    fi
}

# Restore 1Password items from backup
op-restore() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: op-restore <backup-file>"
        return 1
    fi

    local backup_file="$1"

    if [[ ! -f "$backup_file" ]]; then
        echo "Backup file not found: $backup_file"
        return 1
    fi

    echo "Restoring from backup: $backup_file"
    echo "WARNING: This will overwrite existing items!"
    read -q "REPLY?Continue? (y/N) "
    echo

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if [[ "$backup_file" == *.age ]]; then
            age -d "$backup_file" | op item create --format json
        else
            op item create --format json < "$backup_file"
        fi
        echo "Restore completed!"
    else
        echo "Restore cancelled."
    fi
}

# Generate a secure password
op-genpass() {
    local length="${1:-32}"
    local type="${2:-alphanumeric}"

    echo "Generating $type password with length $length:"
    case "$type" in
        "alphanumeric")
            op item create --category password --generate-password="letters,digits,length=$length" --dry-run | jq -r '.password'
            ;;
        "complex")
            op item create --category password --generate-password="letters,digits,symbols,length=$length" --dry-run | jq -r '.password'
            ;;
        "pin")
            op item create --category password --generate-password="digits,length=$length" --dry-run | jq -r '.password'
            ;;
        *)
            echo "Unknown type. Use: alphanumeric, complex, or pin"
            return 1
            ;;
    esac
}

# 1Password SSH key management
op-ssh() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: op-ssh <command>"
        echo "Commands: list, create, get, add-to-agent"
        return 1
    fi

    local command="$1"
    shift

    case "$command" in
        "list")
            echo "SSH Keys in 1Password:"
            op item list --categories ssh-key --format table
            ;;
        "create")
            local name="${1:-$(hostname)-$(date +%Y%m%d)}"
            echo "Creating SSH key: $name"
            ssh-keygen -t ed25519 -C "$name" -f "$HOME/.ssh/$name" -N ""
            op item create --category ssh-key --title "$name" --vault "SSH Keys" --set username="$name" --set public_key="$(cat $HOME/.ssh/$name.pub)"
            echo "SSH key created and stored in 1Password!"
            ;;
        "get")
            local name="$1"
            if [[ -z "$name" ]]; then
                echo "Usage: op-ssh get <key-name>"
                return 1
            fi
            op read "op://{{ .op_account }}/SSH Keys/$name/private_key" > "$HOME/.ssh/$name"
            chmod 600 "$HOME/.ssh/$name"
            echo "SSH key retrieved: $HOME/.ssh/$name"
            ;;
        "add-to-agent")
            local name="$1"
            if [[ -z "$name" ]]; then
                echo "Usage: op-ssh add-to-agent <key-name>"
                return 1
            fi
            ssh-add "$HOME/.ssh/$name"
            echo "SSH key added to agent: $name"
            ;;
        *)
            echo "Unknown command: $command"
            return 1
            ;;
    esac
}

# Auto-signin function (call this when needed)
op-auto-signin() {
    if ! op account list >/dev/null 2>&1; then
        echo "Signing into 1Password..."
        eval $(op signin --account {{ .op_account }})
    fi
}

# Initialize 1Password session on shell start
if [[ -z "$OP_SESSION_{{ .op_account }}" ]]; then
    # Only prompt if we're in an interactive session
    if [[ $- == *i* ]]; then
        echo "1Password session not found. Run 'op-signin' to sign in."
    fi
fi

{{ else -}}
# 1Password CLI is not installed
# Uncomment the following lines if you want to install 1Password CLI automatically

# Install 1Password CLI
# install_op() {
#     echo "Installing 1Password CLI..."
#     {{ if eq .chezmoi.os "darwin" -}}
#     brew install --cask 1password-cli
#     {{ else if eq .chezmoi.os "linux" -}}
#     curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
#     echo 'deb [arch=amd64,arm64 signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main' | sudo tee /etc/apt/sources.list.d/1password.list
#     sudo apt update && sudo apt install 1password-cli
#     {{ end -}}
#     echo "1Password CLI installed successfully!"
# }

# echo "1Password CLI is not installed. Run 'install_op' to install it."
{{ end -}}