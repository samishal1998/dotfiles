# Rust Language Configuration
# This file sets up Rust development environment
# Only loads if Rust/Cargo is installed on the system

{{ if lookPath "cargo" -}}
# Rust environment variables
export RUSTUP_HOME="$HOME/.rustup"
export CARGO_HOME="$HOME/.cargo"
export PATH="$CARGO_HOME/bin:$PATH"

# Rust toolchain settings
export RUST_BACKTRACE=1                    # Enable backtraces by default
export RUST_LOG="info"                     # Default log level

# Cargo settings
export CARGO_INCREMENTAL=1                 # Enable incremental compilation
export CARGO_NET_GIT_FETCH_WITH_CLI=true   # Use git CLI for fetching
export CARGO_NET_RETRY=3                   # Number of retries for network requests

# Rust development directories
export RUST_PROJECTS="$HOME/projects/rust"

# Rust development aliases
alias c='cargo'
alias cb='cargo build'                     # Build project
alias cbr='cargo build --release'          # Build in release mode
alias cc='cargo check'                     # Check project
alias ct='cargo test'                      # Run tests
alias cr='cargo run'                       # Run project
alias cd='cargo doc'                       # Generate documentation
alias cdo='cargo doc --open'               # Generate and open documentation
alias cf='cargo fmt'                       # Format code
alias cl='cargo clippy'                    # Run linter
alias clfix='cargo clippy --fix'           # Fix linting issues
alias cu='cargo update'                    # Update dependencies
alias ca='cargo add'                       # Add dependency
alias crm='cargo remove'                   # Remove dependency
alias csearch='cargo search'               # Search crates
alias ctree='cargo tree'                   # Show dependency tree
alias coutdated='cargo outdated'           # Check for outdated dependencies

# Rust development functions

# Create new Rust project
rustcreate() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: rustcreate <project-name> [type]"
        echo "Types: bin (default), lib"
        return 1
    fi

    local project_name="$1"
    local project_type="${2:-bin}"
    local project_path="$RUST_PROJECTS/$project_name"

    if [[ -d "$project_path" ]]; then
        echo "Project $project_name already exists at $project_path"
        return 1
    fi

    mkdir -p "$project_path"
    cd "$project_path"

    # Create project based on type
    if [[ "$project_type" == "lib" ]]; then
        cargo new --lib "$project_name"
    else
        cargo new "$project_name"
    fi

    cd "$project_name"

    # Create basic directory structure
    mkdir -p src tests benches

    # Add some useful dependencies to Cargo.toml
    if [[ "$project_type" == "bin" ]]; then
        cat >> Cargo.toml << EOF

[dependencies]
anyhow = "1.0"
thiserror = "1.0"
tokio = { version = "1.0", features = ["full"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
clap = { version = "4.0", features = ["derive"] }
EOF
    fi

    echo "Created Rust project: $project_name at $project_path"
    echo "Next steps:"
    echo "  cd $project_path/$project_name"
    echo "  cargo check"
    echo "  cargo build"
    echo "  cargo run"
}

# Run Rust tests with coverage (requires cargo-tarpaulin)
rusttestcov() {
    if ! command -v cargo-tarpaulin >/dev/null 2>&1; then
        echo "cargo-tarpaulin not found. Install with: cargo install cargo-tarpaulin"
        return 1
    fi

    echo "Running tests with coverage..."
    cargo tarpaulin --out Html --output-dir target/tarpaulin

    if [[ -f "target/tarpaulin/tarpaulin-report.html" ]]; then
        echo "Coverage report generated: target/tarpaulin/tarpaulin-report.html"
        # Open in browser if available
        if command -v open >/dev/null 2>&1; then
            open target/tarpaulin/tarpaulin-report.html
        elif command -v xdg-open >/dev/null 2>&1; then
            xdg-open target/tarpaulin/tarpaulin-report.html
        fi
    fi
}

# Update all Rust dependencies
rustupdate() {
    echo "Updating Rust dependencies..."
    cargo update
    rustup update stable
}

# Clean Rust build artifacts
rustclean() {
    echo "Cleaning Rust build artifacts..."
    cargo clean
    rm -rf target/
}

# Show Rust environment information
rustinfo() {
    echo "=== Rust Environment ==="
    echo "Rust Version: $(rustc --version)"
    echo "Cargo Version: $(cargo --version)"
    echo "Rustup Version: $(rustup --version)"
    echo ""
    echo "RUSTUP_HOME: $RUSTUP_HOME"
    echo "CARGO_HOME: $CARGO_HOME"
    echo ""
    echo "=== Installed Toolchains ==="
    rustup toolchain list
    echo ""
    echo "=== Default Toolchain ==="
    rustup show active-toolchain
    echo ""
    echo "=== Installed Targets ==="
    rustup target list --installed
    echo ""
    echo "=== Current Project ==="
    if [[ -f "Cargo.toml" ]]; then
        echo "Name: $(cargo pkgid | cut -d# -f2 | cut -d: -f1)"
        echo "Version: $(cargo pkgid | cut -d# -f2 | cut -d: -f2)"
        echo "Dependencies:"
        cargo tree | head -20
    else
        echo "No Cargo.toml found in current directory"
    fi
}

# Install common Rust development tools
install_rust_tools() {
    echo "Installing common Rust development tools..."
    cargo install cargo-edit          # Easy dependency management
    cargo install cargo-outdated      # Check for outdated dependencies
    cargo install cargo-tree          # Visualize dependency tree
    cargo install cargo-audit         # Security vulnerability scanner
    cargo install cargo-tarpaulin     # Code coverage
    cargo install cargo-watch         # Watch for changes and run commands
    cargo install cargo-expand        # Expand macros
    cargo install cargo-generate      # Project templates
    cargo install cargo-workspaces    # Workspace management
    echo "Rust tools installed successfully!"
}

# Set up Rust for WebAssembly development
setup_rust_wasm() {
    echo "Setting up Rust for WebAssembly development..."
    rustup target add wasm32-unknown-emscripten
    rustup target add wasm32-wasi
    cargo install wasm-pack
    cargo install trunk
    echo "WebAssembly development environment ready!"
}

# Cross-compilation setup
setup_rust_cross() {
    echo "Setting up Rust cross-compilation targets..."
    rustup target add aarch64-unknown-linux-gnu    # ARM64 Linux
    rustup target add x86_64-unknown-linux-gnu     # x86_64 Linux
    rustup target add x86_64-apple-darwin          # macOS
    rustup target add x86_64-pc-windows-gnu        # Windows GNU
    rustup target add x86_64-pc-windows-msvc       # Windows MSVC
    echo "Cross-compilation targets added!"
}

{{ else -}}
# Rust is not installed
# Uncomment the following lines if you want to install Rust automatically

# Install Rust using rustup
# install_rust() {
#     echo "Installing Rust..."
#     curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
#     source $HOME/.cargo/env
#     echo "Rust installed successfully!"
# }

# echo "Rust is not installed. Run 'install_rust' to install it."
{{ end -}}