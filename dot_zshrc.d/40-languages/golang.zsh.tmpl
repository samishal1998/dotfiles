# Go Language Configuration
# This file sets up Go development environment
# Only loads if Go is installed on the system

{{ if lookPath "go" -}}
# Go environment variables
export GOPATH="$HOME/go"
export GOMODCACHE="$GOPATH/pkg/mod"
export GOCACHE="$HOME/.cache/go-build"

# Platform-specific Go settings
{{ if eq .chezmoi.os "darwin" -}}
# macOS Go settings
export GOROOT="/opt/homebrew/opt/go/libexec"
{{ else if eq .chezmoi.os "linux" -}}
# Linux Go settings
export GOROOT="/usr/local/go"
{{ end -}}

# Add Go binaries to PATH
export PATH="$GOPATH/bin:$PATH"
{{ if .GOROOT -}}
export PATH="$GOROOT/bin:$PATH"
{{ end -}}

# Go development settings
export GO111MODULE="on"                    # Enable Go modules
export GOPROXY="https://proxy.golang.org,direct"  # Go module proxy
export GOSUMDB="sum.golang.org"            # Go checksum database
export GOTELEMETRY="off"                   # Disable Go telemetry

# Go build settings
export CGO_ENABLED="1"                     # Enable CGO
export GOOS="{{ .chezmoi.os }}"            # Target OS for cross-compilation
export GOARCH="{{ .chezmoi.arch }}"        # Target architecture

# Go workspace directories
export GO_WORKSPACE="$GOPATH/src"
export GO_PROJECTS="$HOME/projects/go"

# Go development aliases
alias gofmt='gofmt -w'                     # Format Go code
alias govet='go vet ./...'                 # Run go vet
alias gotest='go test ./...'               # Run all tests
alias gobuild='go build ./...'             # Build all packages
alias gorun='go run .'                     # Run current package
alias gomod='go mod'                       # Go module commands
alias goget='go get'                       # Get dependencies
alias goinstall='go install'               # Install packages
alias goclean='go clean -cache -modcache'  # Clean caches

# Go development functions

# Create new Go project
gocreate() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: gocreate <project-name>"
        return 1
    fi

    local project_name="$1"
    local project_path="$GO_PROJECTS/$project_name"

    if [[ -d "$project_path" ]]; then
        echo "Project $project_name already exists at $project_path"
        return 1
    fi

    mkdir -p "$project_path"
    cd "$project_path"

    # Initialize go module
    go mod init "$project_name"

    # Create basic directory structure
    mkdir -p cmd pkg internal

    # Create main.go
    cat > cmd/main.go << EOF
package main

import "fmt"

func main() {
    fmt.Println("Hello, $project_name!")
}
EOF

    # Create README
    cat > README.md << EOF
# $project_name

A Go project.

## Usage

\`\`\`bash
go run cmd/main.go
\`\`\`

## Development

\`\`\`bash
go mod tidy
go test ./...
go build ./...
\`\`\`
EOF

    echo "Created Go project: $project_name at $project_path"
    echo "Next steps:"
    echo "  cd $project_path"
    echo "  go mod tidy"
    echo "  go run cmd/main.go"
}

# Run Go tests with coverage
gotestcov() {
    local coverage_file="coverage.out"
    local coverage_html="coverage.html"

    echo "Running tests with coverage..."
    go test -race -coverprofile="$coverage_file" -covermode=atomic ./...

    if [[ -f "$coverage_file" ]]; then
        go tool cover -html="$coverage_file" -o "$coverage_html"
        echo "Coverage report generated: $coverage_html"
        echo "Total coverage:"
        go tool cover -func="$coverage_file" | tail -1
    fi
}

# Update all Go dependencies
goupdate() {
    echo "Updating Go dependencies..."
    go get -u ./...
    go mod tidy
}

# Clean Go build artifacts and caches
gocleanall() {
    echo "Cleaning Go build artifacts and caches..."
    go clean -cache
    go clean -modcache
    go clean -testcache
    rm -f coverage.out coverage.html
}

# Show Go environment information
goinfo() {
    echo "=== Go Environment ==="
    echo "Go Version: $(go version)"
    echo "GOPATH: $GOPATH"
    echo "GOROOT: $GOROOT"
    echo "GOOS: $GOOS"
    echo "GOARCH: $GOARCH"
    echo "CGO_ENABLED: $CGO_ENABLED"
    echo "GO111MODULE: $GO111MODULE"
    echo ""
    echo "=== Go Modules ==="
    if [[ -f "go.mod" ]]; then
        echo "Module: $(go list -m)"
        echo "Dependencies:"
        go list -m all | head -20
    else
        echo "No go.mod file found in current directory"
    fi
}

# Add Go completion if available
if command -v go 1>/dev/null 2>&1; then
    # Enable Go completion
    if [[ -f "$GOPATH/src/github.com/posener/complete/gocomplete" ]]; then
        complete -C "$GOPATH/src/github.com/posener/complete/gocomplete" go
    fi
fi

{{ else -}}
# Go is not installed
# Uncomment the following lines if you want to install Go automatically

# Install Go using official installer (macOS/Linux)
# install_go() {
#     echo "Installing Go..."
#     {{ if eq .chezmoi.os "darwin" -}}
#     brew install go
#     {{ else if eq .chezmoi.os "linux" -}}
#     wget -q https://golang.org/dl/go1.21.5.linux-amd64.tar.gz
#     sudo tar -C /usr/local -xzf go1.21.5.linux-amd64.tar.gz
#     rm go1.21.5.linux-amd64.tar.gz
#     {{ end -}}
#     echo "Go installed. Please restart your shell."
# }

# echo "Go is not installed. Run 'install_go' to install it."
{{ end -}}