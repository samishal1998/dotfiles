# Python Language Configuration
# This file sets up Python development environment
# Only loads if Python is installed on the system

{{ if lookPath "python3" -}}
# Python environment variables
export PYTHONPATH="$HOME/.local/lib/python3.11/site-packages:$PYTHONPATH"
export PYTHONSTARTUP="$HOME/.pythonrc.py"
export PIP_USER=yes
export PIP_CACHE_DIR="$HOME/.cache/pip"
export PIPENV_CACHE_DIR="$HOME/.cache/pipenv"
export POETRY_CACHE_DIR="$HOME/.cache/poetry"

# Python Version Manager (pyenv) settings
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

# Load pyenv if available
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
fi

# Python development directories
export PYTHON_PROJECTS="$HOME/projects/python"
export PYTHON_VENVS="$HOME/.virtualenvs"

# Python development aliases
alias py='python3'
alias py2='python2'
alias py3='python3'
alias pip='pip3'
alias pipi='pip install'
alias pipir='pip install -r requirements.txt'
alias pipu='pip install --upgrade'
alias pipup='pip install --upgrade pip'
alias pipf='pip freeze'
alias pipreq='pip freeze > requirements.txt'
alias pyv='python --version'
alias pyvenv='python -m venv'
alias pyactivate='source venv/bin/activate'  # For local venv
alias pydeactivate='deactivate'

# Virtual environment aliases
alias venv='python -m venv venv && source venv/bin/activate'
alias activate='source venv/bin/activate'
alias deact='deactivate'

# Poetry aliases
{{ if lookPath "poetry" -}}
alias p='poetry'
alias pr='poetry run'
alias pi='poetry install'
alias pa='poetry add'
alias pad='poetry add --group dev'
alias prm='poetry remove'
alias ps='poetry shell'
alias pb='poetry build'
alias pp='poetry publish'
alias pex='poetry export -f requirements.txt --output requirements.txt'
{{ end -}}

# Pipenv aliases
{{ if lookPath "pipenv" -}}
alias pe='pipenv'
alias pei='pipenv install'
alias pea='pipenv install --dev'
alias per='pipenv run'
alias pes='pipenv shell'
alias peg='pipenv graph'
alias peup='pipenv update'
alias pec='pipenv check'
alias pel='pipenv lock'
{{ end -}}

# Conda aliases (if conda is available)
if command -v conda >/dev/null 2>&1; then
    alias condaa='conda activate'
    alias condad='conda deactivate'
    alias condal='conda env list'
    alias condac='conda create -n'
    alias condar='conda remove -n'
fi

# Python development functions

# Create new Python project
pythoncreate() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: pythoncreate <project-name> [template]"
        echo "Templates: basic, flask, django, fastapi, cli"
        return 1
    fi

    local project_name="$1"
    local template="${2:-basic}"
    local project_path="$PYTHON_PROJECTS/$project_name"

    if [[ -d "$project_path" ]]; then
        echo "Project $project_name already exists at $project_path"
        return 1
    fi

    mkdir -p "$project_path"
    cd "$project_path"

    # Initialize project based on template
    case "$template" in
        "flask")
            python -m venv venv
            source venv/bin/activate
            pip install flask
            mkdir -p app tests
            cat > app/__init__.py << EOF
from flask import Flask

def create_app():
    app = Flask(__name__)

    @app.route('/')
    def hello():
        return 'Hello, $project_name!'

    return app
EOF
            cat > run.py << EOF
from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)
EOF
            ;;
        "django")
            python -m venv venv
            source venv/bin/activate
            pip install django
            django-admin startproject "$project_name" .
            ;;
        "fastapi")
            python -m venv venv
            source venv/bin/activate
            pip install fastapi uvicorn
            mkdir -p app tests
            cat > main.py << EOF
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def root():
    return {"message": "Hello, $project_name!"}
EOF
            ;;
        "cli")
            python -m venv venv
            source venv/bin/activate
            pip install click
            cat > cli.py << EOF
#!/usr/bin/env python3
import click

@click.command()
@click.option('--name', default='World', help='Who to greet')
def cli(name):
    """A simple CLI tool."""
    click.echo(f'Hello, {name}!')

if __name__ == '__main__':
    cli()
EOF
            chmod +x cli.py
            ;;
        *)
            # Basic Python project
            python -m venv venv
            source venv/bin/activate
            mkdir -p src tests docs
            cat > src/main.py << EOF
def main():
    print("Hello, $project_name!")

if __name__ == "__main__":
    main()
EOF
            ;;
    esac

    # Create common files
    cat > .gitignore << EOF
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
.env
.venv
venv/
ENV/
env/
.ENV/
.env/
.pytest_cache/
.coverage
htmlcov/
.tox/
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/
EOF

    cat > README.md << EOF
# $project_name

A Python project.

## Setup

\`\`\`bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
pip install -r requirements.txt
\`\`\`

## Usage

\`\`\`bash
python src/main.py
\`\`\`

## Development

\`\`\`bash
pip install -r requirements-dev.txt
pytest
\`\`\`
EOF

    cat > requirements.txt << EOF
# Add your project dependencies here
EOF

    cat > requirements-dev.txt << EOF
pytest
black
flake8
mypy
EOF

    echo "Created Python project: $project_name at $project_path"
    echo "Template: $template"
    echo "Next steps:"
    echo "  cd $project_path"
    echo "  source venv/bin/activate"
    echo "  pip install -r requirements-dev.txt"
    echo "  python src/main.py"
}

# Install common Python development tools
install_python_tools() {
    echo "Installing common Python development tools..."

    # Install pyenv if not available
    if ! command -v pyenv >/dev/null 2>&1; then
        echo "Installing pyenv..."
        curl https://pyenv.run | bash
    fi

    # Install Poetry if not available
    if ! command -v poetry >/dev/null 2>&1; then
        echo "Installing Poetry..."
        curl -sSL https://install.python-poetry.org | python3 -
    fi

    # Install common Python packages
    pip install --user \
        pipenv \
        virtualenv \
        black \
        flake8 \
        mypy \
        pytest \
        pytest-cov \
        tox \
        pre-commit \
        cookiecutter \
        ipython \
        jupyter \
        requests \
        pandas \
        numpy

    echo "Python tools installed successfully!"
}

# Show Python environment information
pythoninfo() {
    echo "=== Python Environment ==="
    echo "Python 3 Version: $(python3 --version)"
    if command -v python2 >/dev/null 2>&1; then
        echo "Python 2 Version: $(python2 --version)"
    fi
    echo "pip Version: $(pip --version)"
    {{ if lookPath "pyenv" -}}
    echo "pyenv Version: $(pyenv --version)"
    {{ end -}}
    {{ if lookPath "poetry" -}}
    echo "Poetry Version: $(poetry --version)"
    {{ end -}}
    {{ if lookPath "pipenv" -}}
    echo "Pipenv Version: $(pipenv --version)"
    {{ end -}}
    echo ""
    echo "PYTHONPATH: $PYTHONPATH"
    echo "PIP_CACHE_DIR: $PIP_CACHE_DIR"
    echo ""
    echo "=== Current Project ==="
    if [[ -f "pyproject.toml" ]]; then
        echo "Project: $(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['name'])" 2>/dev/null || echo "Unknown")"
    elif [[ -f "setup.py" ]]; then
        echo "Project: $(python setup.py --name 2>/dev/null || echo "Unknown")"
    elif [[ -f "requirements.txt" ]]; then
        echo "Python project with requirements.txt"
    else
        echo "No Python project files found"
    fi
}

# Clean Python project
pythonclean() {
    echo "Cleaning Python project..."
    rm -rf __pycache__/ */__pycache__/
    rm -rf *.pyc */*.pyc
    rm -rf .pytest_cache/
    rm -rf .coverage htmlcov/
    rm -rf build/ dist/ *.egg-info/
    rm -rf .tox/
    rm -rf venv/ .venv/
    echo "Project cleaned!"
}

# Update all Python dependencies
pythonupdate() {
    echo "Updating Python dependencies..."
    if [[ -f "requirements.txt" ]]; then
        pip install --upgrade -r requirements.txt
    fi
    if [[ -f "requirements-dev.txt" ]]; then
        pip install --upgrade -r requirements-dev.txt
    fi
    if [[ -f "pyproject.toml" ]]; then
        poetry update
    fi
}

# Run Python tests with coverage
pythontestcov() {
    if [[ -f "pyproject.toml" ]] || [[ -f "setup.cfg" ]] || [[ -f "tox.ini" ]]; then
        if command -v pytest >/dev/null 2>&1; then
            pytest --cov --cov-report=html
        else
            python -m unittest discover
        fi
    else
        echo "No test configuration found. Install pytest and add to requirements-dev.txt"
    fi
}

{{ else -}}
# Python is not installed
# Uncomment the following lines if you want to install Python automatically

# Install Python using pyenv
# install_python() {
#     echo "Installing Python via pyenv..."
#     curl https://pyenv.run | bash
#     export PYENV_ROOT="$HOME/.pyenv"
#     export PATH="$PYENV_ROOT/bin:$PATH"
#     pyenv install 3.11.6
#     pyenv global 3.11.6
#     echo "Python installed successfully!"
# }

# echo "Python is not installed. Run 'install_python' to install it."
{{ end -}}